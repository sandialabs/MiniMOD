#!/bin/bash

# Default values for options
ENABLE_MPI_PART=false
ENABLE_OPEN_SHMEM=false
ENABLE_CRAY_SHMEM=false

# Parse command line arguments
while [[ $# -gt 0 ]]; do
  case $1 in
    --enable-mpi-part)
      ENABLE_MPI_PART=true
      shift
      ;;
    --enable-open-shmem)
      ENABLE_OPEN_SHMEM=true
      shift
      ;;
    --enable-cray-shmem)
      ENABLE_CRAY_SHMEM=true
      shift
      ;;
    *)
      echo "Unknown option: $1"
      exit 1
      ;;
  esac
done

# Create necessary build directories
mkdir -p obj/kernel obj/granularity obj/communication obj/threading obj/utility

# Generate the Makefile
cat <<EOL > Makefile
CXX = mpicxx
#CXX = oshcxx
#CXX = CC  # cray-shmem compiler
CXXFLAGS := -g -Wall #-O3

# Comment/uncomment these lines to change which modules compile TODO: configure
CXXFLAGS += -DHAVE_MPI -pthread -lpthread

EOL

# Add conditional flags based on the parsed arguments
if [ "\$ENABLE_MPI_PART" = true ]; then
  echo "CXXFLAGS += -DHAVE_MPI_PART" >> Makefile
fi

if [ "\$ENABLE_OPEN_SHMEM" = true ]; then
  echo "CXXFLAGS += -DHAVE_OSHMEM -loshmem" >> Makefile
fi

if [ "\$ENABLE_CRAY_SHMEM" = true ]; then
  echo "CXXFLAGS += -DHAVE_CRAY_SHMEM" >> Makefile
fi

cat <<EOL >> Makefile
CXXFLAGS += -DHAVE_OMP -fopenmp # Assuming GNU compilers

SRC := src
OBJ := obj

kernel_objects = \$(OBJ)/kernel/kernel_sample.o \$(OBJ)/kernel/kernel_sample_thread.o \$(OBJ)/kernel/kernel_collective_bench.o \$(OBJ)/kernel/kernel_channel_bench.o \$(OBJ)/kernel/kernel_gran_bench.o \$(OBJ)/kernel/kernel_sample_threads.o \$(OBJ)/kernel/kernel_cmb.o \$(OBJ)/kernel/kernel_partsend.o
kernel_headers = kernel/kernel_sample.h kernel/kernel_sample_thread.h kernel/kernel_collective_bench.h kernel/kernel_channel_bench.h kernel/kernel_gran_bench.h kernel/kernel_sample_threads.h kernel/kernel_cmb.h kernel/kernel_partsend.h

granularity_objects = \$(OBJ)/granularity/gran_bulk.o \$(OBJ)/granularity/gran_fine.o \$(OBJ)/granularity/gran_bins.o \$(OBJ)/granularity/gran_bins_tmp.o \$(OBJ)/granularity/gran_funn.o \$(OBJ)/granularity/gran_offload.o \$(OBJ)/granularity/gran_offload_bins.o \$(OBJ)/granularity/gran_offload_bins_nminus.o
granularity_headers = granularity/gran_bulk.h granularity/gran_fine.h granularity/gran_bins.h granularity/gran_bins_tmp.h granularity/gran_funn.h granularity/gran_offload.h granularity/gran_offload_bins.h granularity/gran_offload_bins_nminus.h

communication_objects = \$(OBJ)/communication/comm_mpi_pt2pt.o \$(OBJ)/communication/comm_mpi_rma.o \$(OBJ)/communication/comm_mpi_pers.o
communication_headers = communication/comm_mpi_pt2pt.h communication/comm_mpi_rma.h communication/comm_mpi_pers.h

threading_objects = \$(OBJ)/threading/threads_openmp.o \$(OBJ)/threading/threads_pthreads.o
threading_headers = threading/threads_openmp.h threading/threads_pthreads.h

utility_objects = \$(OBJ)/utility/util_queue.o \$(OBJ)/utility/util_ring.o
utility_headers = utility/util_queue.h utility/util_ring.h

EOL

# Add conditional objects and headers based on the parsed arguments
if [ "\$ENABLE_MPI_PART" = true ]; then
  echo "communication_objects += \$(OBJ)/communication/comm_mpi_part.o" >> Makefile
  echo "communication_headers += communication/comm_mpi_part.h" >> Makefile
fi

if [ "\$ENABLE_OPEN_SHMEM" = true ]; then
  echo "communication_objects += \$(OBJ)/communication/comm_openshmem.o" >> Makefile
  echo "communication_headers += communication/comm_openshmem.h" >> Makefile
fi

if [ "\$ENABLE_CRAY_SHMEM" = true ]; then
  echo "communication_objects += \$(OBJ)/communication/comm_crayshmem.o" >> Makefile
  echo "communication_headers += communication/comm_crayshmem.h" >> Makefile
fi

cat <<EOL >> Makefile
objects = \$(OBJ)/driver.o \$(OBJ)/kernel.o \$(OBJ)/gran.o \$(OBJ)/comm.o \$(OBJ)/threads.o \$(kernel_objects) \$(granularity_objects) \$(communication_objects) \$(threading_objects) \$(utility_objects)
headers = kernel.h gran.h comm.h threads.h \$(kernel_headers) \$(granularity_headers) \$(communication_headers) \$(threading_headers) \$(utility_headers)

minimod.x: \$(objects)
	\$(CXX) \$(CXXFLAGS) -o minimod.x \$^

\$(OBJ)/%.o: %.c \$(headers)
	\$(CXX) \$(CXXFLAGS) -c \$< -o \$@

clean:
	rm -f \$(objects) minimod.x
EOL

echo "Configuration complete. Makefile generated and build directories created."
